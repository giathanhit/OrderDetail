@using HqSoftSale.Products;
@using HqSoftSale.Localization;
@using Microsoft.Extensions.Localization;
@using Volo.Abp.Application.Dtos;
@using Volo.Abp.AspNetCore.Components.Web;

@inherits AbpCrudPageBase<IProductAppService, ProductDto, Guid, PagedAndSortedResultRequestDto, CreateUpdateProductDto>
@inject IStringLocalizer<HqSoftSaleResource> L
@inject AbpBlazorMessageLocalizerHelper<HqSoftSaleResource> LH
@inject IProductAppService ProductAppService
@inject NavigationManager NavigationManager

<Modal @ref="CreateModal">
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@L["NewProduct"]</ModalTitle>
                <CloseButton Clicked="CloseCreateModalAsync" />
            </ModalHeader>
            <ModalBody>
                <!-- Code form thêm mới sản phẩm --><Validations @ref="@CreateValidationsRef" Model="@NewEntity" ValidateOnLoad="false">
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Product ID"]</FieldLabel>
                            <TextEdit @bind-Text="@NewEntity.ProductID">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Product Name"]</FieldLabel>
                            <TextEdit @bind-Text="@NewEntity.ProductName">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Warehouse Type"]</FieldLabel>
                            <Select TValue="WarehouseType" @bind-SelectedValue="@NewEntity.Type">
                                @foreach (int WareHouseTypeValue in Enum.GetValues(typeof(WarehouseType)))
                                {
                                    <SelectItem TValue="WarehouseType" Value="@((WarehouseType) WareHouseTypeValue)">
                                        @L[$"Enum:WarehouseType.{WareHouseTypeValue}"]
                                    </SelectItem>
                                }
                            </Select>
                        </Field>
                        <Field>
                            <FieldLabel>@L["Unit Type"]</FieldLabel>
                            <Select TValue="UnitType" @bind-SelectedValue="@NewEntity.UnitType">
                                @foreach (int UnitTypeValue in Enum.GetValues(typeof(UnitType)))
                                {
                                    <SelectItem TValue="UnitType" Value="@((UnitType) UnitTypeValue)">
                                        @L[$"Enum:UnitType.{UnitTypeValue}"]
                                    </SelectItem>
                                }
                            </Select>
                        </Field>
                    </Validation>
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Quanity"]</FieldLabel>
                            <NumericEdit TValue="int" @bind-Value="NewEntity.Quanity" />
                        </Field>
                    </Validation>
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Price"]</FieldLabel>
                            <NumericEdit TValue="double" @bind-Value="NewEntity.Price" />
                        </Field>
                    </Validation> 
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="CloseCreateModalAsync">
                    @L["Cancel"]
                </Button>
                <Button Color="Color.Primary" Type="@ButtonType.Submit" PreventDefaultOnSubmit="true" Clicked="CreateEntityAsync">
                    @L["Save"]
                </Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>
  

@code {

    [Parameter]
    public EventCallback OnProductCreated { get; set; }
    protected Validations CreateValationRef;
    protected CreateUpdateProductDto NewEntity = new();
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (CreateValationRef != null)
        {
            await CreateValationRef.ClearAll();
        }
    }

    protected virtual async Task CreateEntityAsync()
    {
        try
        {
            var validate = true;
            if (CreateValationRef != null)
            {
                validate = await CreateValationRef.ValidateAll();
            }
            if (validate)
            {
                await ProductAppService.CreateAsync(NewEntity);
                await Message.Success("Thêm mới sản phẩm thành công!");
                await CloseCreateModalAsync();
                //NavigationManager.NavigateTo("products");
            }
        }
        catch (Exception ex)
        {
            await HandleErrorAsync(ex);
        }
    }

    public async Task ShowPopupAsync()
    {
        await CreateModal.Show();
    }
}